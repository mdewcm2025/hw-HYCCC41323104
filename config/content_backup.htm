<h1>About</h1>
<p>課程名稱: 網際內容管理 - Web Content Management</p>
<p>學員作業網站:<a href="https://mdewcm2025.github.io/hw-HYCCC41323104/content/index.html" title="ttps://mdewcm2025.github.io/hw-41323128/content/index.html"> https://mdewcm2025.github.io/hw-41323104/content/index.html</a></p>
<p>學員作業倉儲:<a href="https://github.com/mdewcm2025/hw-HYCCC41323104" title="https://github.com/mdewcm2025/hw-HYCCC41323104"> https://github.com/mdewcm2025/hw-HYCCC41323104</a></p>
<hr/>
<p>課程代號: wcm2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>87b7bbx</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 60px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 90px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 120px;">Virtualbox</p>
<p style="padding-left: 120px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 60px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<p style="padding-left: 30px;">2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;">專案題目: 利用 Copilot 解析 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<p style="padding-left: 30px;">3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;"><span>專案題目: 網際內容管理架構下的 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 90px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 90px;">設法將 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>) 與 cmsimde 網際內容管理系統整合</p>
<h1>Note</h1>
<h2>w1</h2>
<h4><span>git 指令與 github 倉儲練習:</span></h4>
<p>以下練習將利用電腦輔助設計室中 C: 既有的可攜程式環境<span style="color: #00ccff;">(要用portable_wcm2025裡的start.bat)</span>, 在近端建立一個 git 倉儲, 然後與 Github 上空白的倉儲進行對應. 完成後使用者可在多個地點將 Github 上的倉儲以 "<span style="background-color: #ffffff;"> git clone"</span> (可以把老師檔案裡的倉儲內容複製到我新建的倉儲) 取下進行改版. 當近端某一舊倉儲版本落後 Github 上倉儲版本時, 則可利用 git pull 取下遠端新增的版本資料後繼續改版. 完成後再新增提交推送至 Github 倉儲.</p>
<p>練習步驟:</p>
<p><strong>步驟一</strong>:</p>
<p>點選自己的usb裡的<span>portable_wcm2025</span>中舊版的可攜程式中的 <span>start.bat</span></p>
<p>啟動之後, 在其中一個命令列式視窗中執行下列指令:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_816227">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">Y:\&gt;cd tmp</code></div>
<div class="line number2 index1 alt1"><code class="js plain">Y:\tmp&gt;mkdir 2</code></div>
<div class="line number3 index2 alt2"><code class="js plain">Y:\tmp&gt;cd 2</code></div>
<div class="line number4 index3 alt1"><code class="js plain">Y:\tmp\w1&gt;git init</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>上列指令第一行"cd tmp"是利用 <span style="color: #00ccff;">cd </span> (更換目錄指令) , 將工作目錄<span style="color: #00ccff;">從 Y 槽的根目錄更換到 tmp 目錄</span>, cd 是<strong> change directory</strong> 的意思</p>
<p>第二行 "mkdir w1"則利用<span style="color: #00ccff;"> mkdir</span> (<span>建立目錄) </span>建立 w1 目錄, mkdir 是 <strong>make directory</strong> 的意思</p>
<p>第三行" cd w1" 再利用 cd 將目錄更換到 2</p>
<p>第四行則在 w1 目錄中執行<span style="color: #00ccff;"> git init</span> 指令, 表示已經可以在可攜程式搜尋路徑中執行 portablegit 中的 git.exe, 並要求執行 init, 也就是 initialize 的意思, 將此目錄(2)作為起始作為 git 倉儲, 執行 git init 之後, git 會在 2 目錄中建立一個 .git 目錄(<strong><span style="color: #ff9900;">要記得在顯示中打開隱藏的檔案</span></strong>), 其中帶有 git 所需的設定檔案, 與存放版本資料的資料架構.</p>
<p><strong>步</strong><strong>驟二:</strong></p>
<p>註記使用者的帳號與電子郵箱, 也還沒有設定推送的目的地, 因此先在可攜系統中設定使用者帳號:</p>
<p>git config --global <span style="color: #33cccc;">user.name</span> "your github account" </p>
<p>接著設定電子郵箱:</p>
<p>git config --global <span style="color: #33cccc;">user.email</span> "your email"</p>
<pre>name = HYCCC41323104<br/>email = <a href="mailto:linsdaughtermia@gmail.com">linsdaughtermia@gmail.com</a> <img alt="tongue-out" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-tongue-out.gif"/><br/><strong>步驟三:<br/></strong>在<span>先登入 github.com, 然後建立一個完全空白的倉儲。<br/></span>建立倉儲的方法:</pre>
<pre>1.點圖片中github中網頁裡的右上角的加號，點選new repository 可以新建新的倉儲</pre>
<pre><br/><img alt="" height="117" src="/images/github.jpg" width="541"/><br/><br/>2.然後進去之後網頁就會像下面這張圖一樣，在repository name 的地方填新建的倉儲名稱，下面的Description可以填關於倉儲的附註。<br/>其餘所有選項都不用更改，然後點右下角的create repository。</pre>
<pre><br/><img alt="" height="259" src="/images/螢幕擷取畫面 2025-05-08 113705.jpg" width="582"/><br/><br/><img alt="" height="253" src="/images/螢幕擷取畫面 2025-05-08 113716.jpg" width="584"/></pre>
<p>3.接下來，會進到這個網頁</p>
<p><img alt="" height="389" src="/images/chrome_7tbXfbCrJg.jpg" width="595"/></p>
<p>4.記得先去把portable_wcm2025的home_ipv6裡的.gitconfig拉進白色的，改得跟下圖一樣。</p>
<p><img alt="" height="209" src="/images/explorer_wHkRaj62jc.jpg" width="597"/></p>
<p>5.回到近端，因為一開始已經建立了目錄2，所以只要在可攜程式中輸入:</p>
<p><span class="user-select-contain"><strong>(在3.的圖中 倒數第二段的程式可以直接複製)</strong><br/>echo "# 2" &gt;&gt; README.md</span> <span class="user-select-contain">git add README.md</span> <span class="user-select-contain">git commit -m "first commit"</span> <span class="user-select-contain">git branch -M main</span> <span class="user-select-contain">git remote add origin <span data-targets="git-clone-help.helpTexts">git@<span>HYCCC41323104</span>:HYCCC41323104/2.git</span></span> <span class="user-select-contain mb-0">git push -u origin main<br/><span style="color: #3366ff;">(要把</span></span><span class="user-select-contain"><span data-targets="git-clone-help.helpTexts"><span style="color: #3366ff;">github.com換成自己的github的帳號) <img alt="wink" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-wink.gif"/><br/></span><br/><br/></span></span></p>
<pre class="copyable-terminal-content f5" id="empty-setup-new-repo-echo"><span class="user-select-contain mb-0"> </span></pre>
<h2>IPv6</h2>
<p><strong>方法一：手動設定 IPv6 與 Proxy</strong></p>
<p><strong>一、設定 IPv6</strong></p>
<ol start="1">
<li style="text-align: left;">
<p>開啟 控制台</p>
</li>
<li style="text-align: left;">
<p>將右上角的「檢視方式」改為 類別</p>
</li>
<li style="text-align: left;">
<p>點選 網路和網際網路</p>
</li>
<li style="text-align: left;">
<p>點選 網路和共用中心</p>
</li>
<li style="text-align: left;">
<p>點選左側 變更介面卡設定</p>
</li>
<li style="text-align: left;">
<p>對「乙太網路 2」點兩下 (第一個)</p>
</li>
<li style="text-align: left;">
<p>點選 內容</p>
</li>
<li style="text-align: left;">
<p>選取「網際網路通訊協定第6版 (TCP/IPv6)」，再點選 內容</p>
</li>
<li style="text-align: left;">
<p>勾選 使用下列 IPv6 位址 (U)，並填入以下資料：</p>
<ul>
<li>
<p>IPv6 位址：<span style="color: #ff00ff;">2001:288:6004:17:fff1:cc25:<wbr/>0000:a023</span></p>
</li>
<li>
<p>子網路前綴長度：<span style="color: #ffcc00;">64</span></p>
</li>
<li>
<p>閘道：<span style="color: #ff00ff;">2001:288:6004:17::254</span></p>
</li>
</ul>
<p></p>
</li>
<li>
<p style="text-align: left;">DNS 伺服器地址如下：</p>
<ul style="text-align: left;">
<li>
<p>優先 DNS：<span style="color: #ff00ff;">2001:288:6004:17::3</span></p>
</li>
<li>
<p>備用 DNS：<span style="color: #ff00ff;">2001:b000:168::1</span></p>
</li>
</ul>
</li>
</ol>
<p><strong>二、設定 Proxy（使用 GitHub 時必須）</strong></p>
<ol start="1">
<li>
<p>開啟 設定</p>
</li>
<li>
<p>點選 網路和網際網路</p>
</li>
<li>
<p>點選 Proxy</p>
</li>
<li>
<p>關閉「自動 Proxy 設定」</p>
</li>
<li>
<p>開啟「手動 Proxy 設定」，點選 編輯</p>
</li>
<li>
<p>輸入以下資料：</p>
<ul>
<li>
<p>位址：<span style="color: #00ccff;"><a data-saferedirecturl="https://www.google.com/url?q=http://p4.cycu.org&amp;source=gmail&amp;ust=1748574568094000&amp;usg=AOvVaw0dm9hRRmBjX_mBeXIl7jYZ" href="http://p4.cycu.org/" style="color: #00ccff;" target="_blank">p4.cycu.org</a></span></p>
</li>
<li>
<p>連接埠：<span style="color: #00ccff;">3128</span></p>
</li>
<li>
<p>不使用 Proxy 的位址：<span style="color: #00ccff;">*.local</span></p>
</li>
<li><span color="#00ccff" style="color: #00ccff;">下面要打勾</span></li>
</ul>
</li>
</ol>
<p><strong>方法二：使用 USB 安裝批次檔自動設定</strong></p>
<ol start="1">
<li>
<p>將包含 IPV6_setup 資料夾的 USB 插入電腦</p>
</li>
<li>
<p>找到 1_ipv6_network_setup.bat 檔案</p>
</li>
<li>
<p>右鍵點擊，選擇「以系統管理員身分執行」</p>
</li>
<li>
<p>執行完畢後，仍需確認 IPv6 設定正確，並依需求設定 Proxy（如使用 GitHub)</p>
<p>*<span style="color: #ff0000;">注意事項</span></p>
<ul>
<li>
<p>硬碟名稱請<span style="color: #ff0000;">勿包含空格</span>，否則可能<span style="color: #ff0000;">導致批次檔執行失敗</span>。</p>
</li>
<li>
<p>本設定僅適用於<span style="color: #00ccff;">機械設計系</span>所配給之電腦，其他裝置無法使用。</p>
</li>
</ul>
</li>
</ol>
<h2>nginx</h2>
<p><strong>使用nginx的前置作業:</strong></p>
<div><span style="color: #ffffff;"><strong><br/></strong><span style="color: #ff6600; background-color: #ffffff;">first</span></span><br/>下載certbote然後解壓縮到C槽(因為之後用不到）<br/>在C槽裡面會看到<br/>programfiles➡️Certbot➡️pkgs➡️certbot➡️tests➡️testdata➡️sample_archive<br/>➡️一個f開頭另一個p開頭的檔案</div>
<div></div>
<div><span style="color: #ff6600;">second</span><br/><span>把這兩個檔案拉到nginx1.26.3中的「conf」裡面</span><br/><span>把兩個檔案的1這個數字刪除</span></div>
<div><span></span></div>
<div><span><span style="color: #ff6600;">third</span><br/><span>在nginx1.26.3的檔案中，</span><br/><span>先將nginx.conf改名為nginx.conf_orig</span></span></div>
<div><span><span></span></span></div>
<div><span><span><span style="color: #ff6600;">forth</span><br/><span>在老師作業網頁裡HW1裡nginx.conf的連結點進去</span><br/><span>複製全部程式，</span><br/><span>貼到SciTE裡面，</span><br/><span>再更改w99改成自己的編號，</span><br/><span>最後另存(Save as)到conf.的檔案夾裡面且</span><br/><span>命名為nginx.conf！</span></span></span></div>
<div><span><span><span></span></span></span></div>
<div><span><span><span><span style="color: #ff6600;">fifth</span><br/><span>在老師作業網頁裡HW2裡，</span><br/><span><span style="background-color: #ffff00;">有一句話基本設定檔案</span>，然後右鍵➡️</span><span>在新分頁開啟程式檔start_waitress.py，</span><br/><span>複製程式<span style="background-color: #ffffff; color: #333333;">到 SciTE（白色的</span></span><span><span style="background-color: #ffffff; color: #333333;">）</span>裡面，</span><br/><span>再Save As到tmp裡面自己的近端的倉儲資料夾內就可以啦～</span></span></span></span></div>
<div><span><span><span><span></span></span></span></span></div>
<div><span><span><span><span></span></span></span></span></div>
<div><span><span><span><span><span style="color: #ff6600;">sixth</span><br/><span>在命令列（黑色的</span><span>）中打pip install waitress 按Eater</span><br/><span>就會下載好了</span></span></span></span></span></div>
<div><span><span><span><span><span></span></span></span></span></span></div>
<div><span><span><span><span><span><span style="color: #ff6600;">seventh</span><br/><span>檢查</span><br/><span>ipv6</span><br/><span>proxy</span><br/><span>nginx有開啟(開啟方法如下）</span></span></span></span></span></span></div>
<div><span><span><span><span><span><span></span></span></span></span></span></span></div>
<div><span>[<span style="color: #ff00ff;">nginx的開啟方法</span>：</span><br/><span>1.點usb裡的nginx然後點兩下，會出現防火牆，點允許（</span><wbr/><span>nginx會關起來，沒事！）</span><br/><span>2.在瀏覽器搜localhost 會出現⬇️</span></div>
<div><span>就開成功了]</span></div>
<div><span style="color: #ff6600;"></span></div>
<div><span><span><span style="color: #ff6600;">eighth</span><br/><span>到命令列（黑色的</span><span>）打</span><br/><span>cd tmp</span><br/><span>cd 自己的近端倉儲檔案夾名稱<br/></span></span></span><span><span>打上python start_waitress.py 然後按Eater</span><br/><span>（註：不會跑任何東西）</span></span></div>
<div><span><span><span><span></span></span></span></span></div>
<div><span><span><span><span><span><span style="color: #ff6600;">ninth</span><br/><span>到估狗</span><br/><span>網址打</span><a data-saferedirecturl="https://www.google.com/url?q=https://w23.mde.nfu.edu.tw&amp;source=gmail&amp;ust=1749901894334000&amp;usg=AOvVaw35RMW2Phlrd6upSGUnqrHU" href="https://w23.mde.nfu.edu.tw/" target="_blank">https://w23.mde.nfu.edu.tw</a><br/><span>然後就成功了</span></span></span></span></span></span>
<div class="yj6qo"></div>
</div>
<div><span><span><span><span></span></span></span></span></div>
<div><span><span><span><span></span></span></span></span></div>
<div><span><span><span><span></span></span></span></span></div><h1>Task</h1>
<h2>task1</h2>
<h4>自行製作<span style="color: #ff00ff;">可攜程式</span>系統</h4>
<h4><span style="color: #ff00ff;">可攜程式<span style="color: #000000;">就是可以下載在usb裡隨時打開就可以打程式的地方。</span></span></h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p><img alt="laughing" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-laughing.gif"/>以下為操作步驟:</p>
<p>     更換python版本(311改313)</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>點兩下 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE (白色的) 中開啟 Y:\<a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/gen_python313.py">gen_python313.py</a>, 裡面的python是3.11版本的，所以以下拉式功能表中的Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用功能表 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat. </li>
</ol>
<p>      安裝模組</p>
<ol>
<li>接下來以<span>portable_python311 目錄中的</span>stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以剛剛新建立的 start_python313.bat 開啟(點兩下)可攜環境, 之後在命令列(黑色的)輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 <span style="color: #ff0000;"><strong>Ctrl + z</strong></span> 退出 Python 後, 利用 pip list(在黑色的打python) 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列(黑色)中, 以 (打字)python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以(打字) pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的<span> </span><a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>,<span> </span><a href="https://git-scm.com/downloads/win">Portablegit</a>,<span> </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>,<span> </span><a href="https://github.com/ShareX/ShareX/releases">ShareX</a>,<span> </span><a href="https://www.debugmode.com/wink.html">Wink</a>,<span> </span><a href="https://solvespace.com/download.pl">Solvespace</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a><span> </span>以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<p>以下為操作影片:</p>
<p>但我之前在課堂上就下載過了，所以這只是配合上面的步驟示範一下(›´ω`‹ )</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/YFKYgJ1ctbo?si=sHGmmAUOOEJBP27F" title="YouTube video player" width="560"></iframe></p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/iGzMwyOa-3A?si=AqPgeI4gyGRuSxFG" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p>若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p>指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p>利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p>接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p>接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p>接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p>在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在.</p>
<p>第八步:</p>
<p>上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p>由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p>若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p>由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_253035">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">url = git@mysession:mdewcm2025/hw-scrum-1.git</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/:refs/remotes/origin/</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h2>task2.5</h2>
<p><span>Fossil 已經下載在隨身碟了<img alt="kiss" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-kiss.gif"/>!!!  (那隻蜥蜴)</span></p>
<p><span><img alt="" height="337" src="/images/undefined - Imgur.png" width="562"/></span></p>
<p><span>Fossil SCM 的應用</span></p>
<p><span><a href="https://fossil-scm.org/">https://fossil-scm.org/</a> </span></p>
<p></p>
<h3>IPv6</h3>
<p style="text-align: left;"><span style="color: #00ff00;">Note:</span></p>
<p style="text-align: left;">ivp6的設定:控制台⮕控制台的檢視方式改成類別⮕選網路和網際網路⮕網路和共用中心⮕變更介面卡設定⮕乙太網路2（點兩下）⮕內容⮕網際網路通訊協定第6版（<wbr/>TCP/IPV6)⮕內容⮕使用下列IPV6位址⮕</p>
<div>
<div class="im">
<p>2001:288:6004:17:fff1:cc25:<wbr/>0000:a023</p>
<p>64</p>
<p>2001:288:6004:17::254</p>
<p>2001:288:6004:17::3</p>
<p>2001:b000:168::1</p>
</div>
</div>
<div>
<p dir="auto">設定 網路和網際網路 Proxy 自動Proxy設定關掉 點選手動Proxy設定 編輯 打字</p>
<p dir="auto"><a data-saferedirecturl="https://www.google.com/url?q=http://p4.cycu.org&amp;source=gmail&amp;ust=1747366691930000&amp;usg=AOvVaw0-XaLLzqAcn6MZ975dowMy" href="http://p4.cycu.org/" target="_blank">p4.cycu.org</a> </p>
<p>3128</p>
<p>*.local</p>
<p>然後要記得最後的選項要打勾</p>
<p></p>
</div>
<pre><br/><span>學員序號為23的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a023<br/>要先下載然後解壓縮 :<a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/account_network_setup.7z">account_network_setup.7z<br/></a>再跟著<a href='/get_page/IPv6/&lt;iframe width="560" height="315" src="https:/www.youtube.com/embed/6YMViZXpRKQ?si=jHUOJ0I4nDsK5fVb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;'>老師的操作影片</a>操作。<br/><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xmhY2GCgdSg?si=ohEwGJ0rXUp3qiz7" title="YouTube video player" width="560"></iframe><br/><br/><br/><br/>note:關於 fossil 和 SCM 要看<a href="https://mdewcm2025.github.io/hw-scrum-1/content/IPv6.html">老師網站</a>的操作影片</span></pre>
<h2>task3</h2>
<h4>使用 Nginx 建立全球資訊網伺服器</h4>
<h4>HTML 中的 CSS 與 Javascript</h4>
<h4>Windows 環境中的 WWW server</h4>
<h4>Ubuntu 環境中的 WWW server</h4>
<hr/>
<p>Windows:</p>
<p><a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO</a></p>
<p><a href="http://229.cycu.org/win10.vdi">http://229.cycu.org/win10.vdi</a> </p>
<p>利用 nssm 將 nginx.exe 設為系統服務</p>
<p>必須使用管理者的 cmd, 然後執行 nssm install nginx, nssm edit nginx, nssm remove nginx</p>
<p>nginx.conf </p>
<div>
<div class="syntaxhighlighter js" id="highlighter_77005">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js preprocessor">#user  nobody;</code></div>
<div class="line number2 index1 alt1"><code class="js plain">worker_processes  1;</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="js preprocessor">#error_log  logs/error.log;</code></div>
<div class="line number5 index4 alt2"><code class="js preprocessor">#error_log  logs/error.log  notice;</code></div>
<div class="line number6 index5 alt1"><code class="js preprocessor">#error_log  logs/error.log  info;</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="js preprocessor">#pid        logs/nginx.pid;</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="js plain">events {</code></div>
<div class="line number12 index11 alt1"><code class="js spaces">    </code><code class="js plain">worker_connections  1024;</code></div>
<div class="line number13 index12 alt2"><code class="js plain">}</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="js plain">http {</code></div>
<div class="line number16 index15 alt1"><code class="js spaces">    </code><code class="js plain">include       mime.types;</code></div>
<div class="line number17 index16 alt2"><code class="js spaces">    </code><code class="js plain">default_type  application/octet-stream;</code></div>
<div class="line number18 index17 alt1"> </div>
<div class="line number19 index18 alt2"><code class="js spaces">    </code><code class="js plain">sendfile        on;</code></div>
<div class="line number20 index19 alt1"><code class="js spaces">    </code><code class="js plain">keepalive_timeout  65;</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="js spaces">    </code><code class="js plain">server {</code></div>
<div class="line number23 index22 alt2"><code class="js spaces">        </code><code class="js preprocessor"># a0xx 中的 xx 為上課時的學員序號</code></div>
<div class="line number24 index23 alt1"><code class="js spaces">        </code><code class="js preprocessor"># https://mdewcm2025.github.io/hw-scrum-1/downloads/1a_stud.txt</code></div>
<div class="line number25 index24 alt2"><code class="js spaces">        </code><code class="js plain">listen [2001:288:6004:17:fff1:cc25::a0xx]:80;</code></div>
<div class="line number26 index25 alt1"><code class="js spaces">       </code><code class="js preprocessor"># server_name  your-domain.com;</code></div>
<div class="line number27 index26 alt2"> </div>
<div class="line number28 index27 alt1"><code class="js spaces">        </code><code class="js plain">location / {</code></div>
<div class="line number29 index28 alt2"><code class="js spaces">            </code><code class="js plain">root   html;</code></div>
<div class="line number30 index29 alt1"><code class="js spaces">            </code><code class="js plain">index  index.html index.htm;</code></div>
<div class="line number31 index30 alt2"><code class="js spaces">        </code><code class="js plain">}</code></div>
<div class="line number32 index31 alt1"> </div>
<div class="line number33 index32 alt2"><code class="js spaces">        </code><code class="js plain">error_page 404 /404.html;</code></div>
<div class="line number34 index33 alt1"><code class="js spaces">        </code><code class="js plain">location = /40x.html {</code></div>
<div class="line number35 index34 alt2"><code class="js spaces">        </code><code class="js plain">}</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="js spaces">        </code><code class="js plain">error_page 500 502 503 504 /50x.html;</code></div>
<div class="line number38 index37 alt1"><code class="js spaces">        </code><code class="js plain">location = /50x.html {</code></div>
<div class="line number39 index38 alt2"><code class="js spaces">        </code><code class="js plain">}</code></div>
<div class="line number40 index39 alt1"><code class="js spaces">    </code><code class="js plain">}</code></div>
<div class="line number41 index40 alt2"><code class="js plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Ubuntu:</p>
<p><a href="http://229.cycu.org/ubuntu-24.04.2-live-server-amd64.iso">ubuntu-24.04.2-live-server-amd64.iso</a></p>
<p><a href="http://229.cycu.org/ubuntu.vdi">http://229.cycu.org/ubuntu.vdi</a> </p>
<p>Virtualbox:</p>
<p><a href="http://229.cycu.org/VirtualBox-7.1.6-167084-Win.exe">VirtualBox-7.1.6-167084-Win.exe</a></p>
<p><a href="http://229.cycu.org/Portable-Virtualbox.7z">Portable-Virtualbox.7z</a></p>
<p>在同一個 Virtualbox 設定下, 使用同一個 .vdi, 必須要先修改其 UUID:</p>
<p>"C:\Program Files\Oracle\VirtualBox\VBoxManage" internalcommands sethduuid c:\users\yen\downloads\win10.vdi</p>
<h2>task4</h2>
<h1>Homework</h1>
<p>1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 30px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 60px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 90px;">Virtualbox</p>
<p style="padding-left: 90px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 30px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<h2>HW1</h2>
<p>作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> (在學校電腦桌面) 建立全球資訊網伺服器</p>
<p style="padding-left: 30px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 30px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 30px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 30px;">nginx和virtualbox 皆可以用</p>
<p style="padding-left: 30px;">要先下載task3裡的東西</p>
<p style="padding-left: 60px;">(Virtualbox</p>
<p style="padding-left: 60px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 60px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 60px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載)</p>
<p style="padding-left: 60px;"></p>
<h2>HW2</h2>
<p>作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<h1>Midterm</h1>
<p>2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 30px;">專案題目: 利用 Copilot 解析 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<h1>Final</h1>
<p>3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 30px;"><span>專案題目: 網際內容管理架構下的<span> </span><a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 60px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 60px;">設法將<span> </span><a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>) 與 cmsimde 網際內容管理系統整合</p>
<p>在 Windows 操作系統以 Nginx + waitress 配置分組倉儲的動態編輯系統與靜態內容檢視系統:</p>
<ol>
<li>承接上一步驟所設定的 Nginx 伺服器, 將用來 Proxy 代理由 waitress 所啟動的 http 動態編輯系統</li>
<li>啟動可攜 Python 程式系統, 確定能在 localhost 啟動分組動態編輯網站, 同時也能透過 init.py 的設定, 以組長的網域啟動</li>
<li>在可攜系統中安裝 waitress 模組: pip install waitress</li>
<li>修改 nginx.conf, 設法利用組長的 IPv6 網路位址對應的符號名稱, 以及 fullchain.pem + privkey.pem 啟動伺服器, 並從 waitress 啟動的 port 8080 代理至 IPv6 為主的 https port 443</li>
<li>先以 waitress 在 localhost port 8080 啟動分組動態編輯網站後, 啟動 Nginx</li>
<li>測試是否可利用 https, 以 mde.nfu.edu.tw 網域對應的伺服器名稱進行連線</li>
</ol>
<p></p>
<p style="padding-left: 60px;"></p>
<p style="padding-left: 60px;"></p>
<p style="padding-left: 60px;"></p>
<p style="padding-left: 60px;"></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>