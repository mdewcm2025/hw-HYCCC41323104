var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 網際內容管理 - Web Content Management \n 學員作業網站:  https://mdewcm2025.github.io/hw-41323104/content/index.html \n 學員作業倉儲: \xa0https://github.com/mdewcm2025/hw-HYCCC41323104 \n \n 課程代號: wcm2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 87b7bbx \n \n 課程評分: \n 1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg\'s world \xa0( 原始碼 ) \n 2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg\'s world \xa0( 原始碼 ) \n 3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg\'s world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg\'s world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n', 'tags': '', 'url': 'About.html'}, {'title': 'w1', 'text': 'git 指令與 github 倉儲練習: \n 以下練習將利用電腦輔助設計室中 C: 既有的可攜程式環境 (要用portable_wcm2025裡的start.bat) , 在近端建立一個 git 倉儲, 然後與 Github 上空白的倉儲進行對應. 完成後使用者可在多個地點將 Github 上的倉儲以 " \xa0git clone" \xa0(可以把老師檔案裡的倉儲內容複製到我新建的倉儲) 取下進行改版. 當近端某一舊倉儲版本落後 Github 上倉儲版本時, 則可利用 git pull 取下遠端新增的版本資料後繼續改版. 完成後再新增提交推送至 Github 倉儲. \n 練習步驟: \n 步驟一 : \n 點選自己的usb裡的 portable_wcm2025 中舊版的可攜程式中的  start.bat \n 啟動之後, 在其中一個命令列式視窗中執行下列指令: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n Y:\\>cd tmp \n Y:\\tmp>mkdir 2 \n Y:\\tmp>cd 2 \n Y:\\tmp\\w1>git init \n \n \n \n \n \n \n \n 上列指令第一行"cd tmp"是利用  cd\xa0 \xa0(更換目錄指令) , 將工作目錄 從 Y 槽的根目錄更換到 tmp 目錄 , cd 是  change directory  的意思 \n 第二行 "mkdir w1"則利用  mkdir \xa0( 建立目錄)\xa0 建立 w1 目錄, mkdir 是  make directory  的意思 \n 第三行" cd w1" 再利用 cd 將目錄更換到 2 \n 第四行則在 w1 目錄中執行  git init  指令, 表示已經可以在可攜程式搜尋路徑中執行 portablegit 中的 git.exe, 並要求執行 init, 也就是 initialize 的意思, 將此目錄(2)作為起始作為 git 倉儲, 執行 git init 之後, git 會在 2 目錄中建立一個 .git 目錄( 要記得在顯示中打開隱藏的檔案 ), 其中帶有 git 所需的設定檔案, 與存放版本資料的資料架構. \n 步 驟二: \n 註記使用者的帳號與電子郵箱, 也還沒有設定推送的目的地, 因此先在可攜系統中設定使用者帳號: \n git config --global  user.name  "your github account"\xa0 \n 接著設定電子郵箱: \n git config --global  user.email  "your email" \n name = HYCCC41323104 email =  linsdaughtermia@gmail.com \xa0 步驟三: 在 先登入 github.com, 然後建立一個完全空白的倉儲。 建立倉儲的方法: \n 1.點圖片中github中網頁裡的右上角的加號，點選new repository 可以新建新的倉儲 \n 2.然後進去之後網頁就會像下面這張圖一樣，在repository name 的地方填新建的倉儲名稱，下面的Description可以填關於倉儲的附註。 其餘所有選項都不用更改，然後點右下角的create\xa0repository。 \n \n 3.接下來，會進到這個網頁 \n \n 4.記得先去把portable_wcm2025的home_ipv6裡的.gitconfig拉進白色的，改得跟下圖一樣。 \n \n 5.回到近端，因為一開始已經建立了目錄2，所以只要在可攜程式中輸入: \n (在3.的圖中 倒數第二段的程式可以直接複製) echo "# 2" >> README.md \n git add README.md \n git commit -m "first commit" \n git branch -M main \n git remote add origin  git@ HYCCC41323104 :HYCCC41323104/2.git \n git push -u origin main (要把 github.com換成自己的github的帳號)  \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'Task', 'text': '', 'tags': '', 'url': 'Task.html'}, {'title': 'task1', 'text': '自行製作 可攜程式 系統 \n 可攜程式 就是可以下載在usb裡隨時打開就可以打程式的地方。 \n 此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境. \n 以下為操作步驟: \n \xa0 \xa0 \xa0更換python版本(311改313) \n \n 下載 \xa0 portable_python311.7z , 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境. \n 點兩下 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE (白色的) 中開啟 Y:\\ gen_python313.py , 裡面的python是3.11版本的，所以以下拉式功能表中的Tools - Go 執行, 便可在 Y:\\ 建立 Python313 目錄. \n 接著修改 start_ipv6.bat, 利用功能表 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.\xa0 \n \n \xa0 \xa0 \xa0 安裝模組 \n \n 接下來以 portable_python311 目錄中的 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以剛剛新建立的 start_python313.bat 開啟(點兩下)可攜環境, 之後在命令列(黑色的)輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用  Ctrl + z  退出 Python 後, 利用 pip list(在黑色的打python) 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具. \n 在命令列(黑色)中, 以 (打字)python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成. \n 最後在命令列中, 以(打字) pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲. \n 之後利用新版的 \xa0 SciTE , \xa0 Portablegit , \xa0 PUTTY , \xa0 ShareX , \xa0 Wink , \xa0 Solvespace , \xa0 Zoomit , \xa0 ProcessExplorer \xa0 以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動. \n \n 以下為操作影片: \n 但我之前在課堂上就下載過了，所以這只是配合上面的步驟示範一下(›´ω`‹ ) \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '使用 SSH 協定執行作業倉儲的推送 \n \n SSH \xa0 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe). \n 使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟: \n 第一步: \n 若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\\putty\\plink.exe). \n 第二步: \n 指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中. \n 第三步: \n 利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk) \n 第四步: \n 接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\\. \n 第五步: \n 接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com. \n 第六步: \n 接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫. \n 第七步: \n 在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在. \n 第八步: \n 上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push. \n 第九步: \n 由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\\ 的位置. \n 第十步: \n 若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名. \n 第十一步: \n 由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中. \n 使用 PuTTY session 設定倉儲 .git/config 中的 URL \n 假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n [remote  "origin" ] \n \xa0\xa0\xa0\xa0 url = git@mysession:mdewcm2025/hw-scrum-1.git \n \xa0\xa0\xa0\xa0 fetch = +refs/heads/:refs/remotes/origin/ \n \n \n \n \n \n \n \n 其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號. \n url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域. \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task2.5', 'text': 'Fossil\xa0已經下載在隨身碟了 !!!\xa0 (那隻蜥蜴) \n \n Fossil SCM 的應用 \n https://fossil-scm.org/ \xa0 \n \n', 'tags': '', 'url': 'task2.5.html'}, {'title': 'IPv6', 'text': 'Note: \n ivp6的設定:控制台⮕控制台的檢視方式改成類別⮕選網路和網際網路⮕網路和共用中心⮕變更介面卡設定⮕乙太網路2（點兩下）⮕內容⮕網際網路通訊協定第6版（ TCP/IPV6)⮕內容⮕使用下列IPV6位址⮕ \n \n \n 2001:288:6004:17:fff1:cc25: 0000:a023 \n 64 \n 2001:288:6004:17::254 \n 2001:288:6004:17::3 \n 2001:b000:168::1 \n \n \n \n 設定 網路和網際網路 Proxy 自動Proxy設定關掉 點選手動Proxy設定 編輯 打字 \n p4.cycu.org \xa0 \n 3128 \n *.local \n 然後要記得最後的選項要打勾 \n \n \n 學員序號為23的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a023 要先下載然後解壓縮 : account_network_setup.7z 再跟著 老師的操作影片 操作。 note:關於 fossil 和 SCM 要看 老師網站 的操作影片 \n', 'tags': '', 'url': 'IPv6.html'}, {'title': 'task3', 'text': '使用 Nginx 建立全球資訊網伺服器 \n HTML 中的 CSS 與 Javascript \n Windows 環境中的 WWW server \n Ubuntu 環境中的 WWW server \n \n Windows: \n https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO \n http://229.cycu.org/win10.vdi \xa0 \n 利用 nssm 將 nginx.exe 設為系統服務 \n 必須使用管理者的 cmd, 然後執行 nssm install nginx, nssm edit nginx, nssm remove nginx \n nginx.conf\xa0 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n \n \n \n #user\xa0 nobody; \n worker_processes\xa0 1; \n \xa0 \n #error_log\xa0 logs/error.log; \n #error_log\xa0 logs/error.log\xa0 notice; \n #error_log\xa0 logs/error.log\xa0 info; \n \xa0 \n #pid\xa0\xa0\xa0\xa0\xa0\xa0\xa0 logs/nginx.pid; \n \xa0 \n \xa0 \n events { \n \xa0\xa0\xa0\xa0 worker_connections\xa0 1024; \n } \n \xa0 \n http { \n \xa0\xa0\xa0\xa0 include\xa0\xa0\xa0\xa0\xa0\xa0 mime.types; \n \xa0\xa0\xa0\xa0 default_type\xa0 application/octet-stream; \n \xa0 \n \xa0\xa0\xa0\xa0 sendfile\xa0\xa0\xa0\xa0\xa0\xa0\xa0 on; \n \xa0\xa0\xa0\xa0 keepalive_timeout\xa0 65; \n \xa0 \n \xa0\xa0\xa0\xa0 server { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # a0xx 中的 xx 為上課時的學員序號 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # https://mdewcm2025.github.io/hw-scrum-1/downloads/1a_stud.txt \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 listen [2001:288:6004:17:fff1:cc25::a0xx]:80; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0 # server_name\xa0 your-domain.com; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 location / { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 root\xa0\xa0 html; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 index\xa0 index.html index.htm; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 error_page 404 /404.html; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 location = /40x.html { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 error_page 500 502 503 504 /50x.html; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 location = /50x.html { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 } \n } \n \n \n \n \n \n \n \n Ubuntu: \n ubuntu-24.04.2-live-server-amd64.iso \n http://229.cycu.org/ubuntu.vdi \xa0 \n Virtualbox: \n VirtualBox-7.1.6-167084-Win.exe \n Portable-Virtualbox.7z \n 在同一個 Virtualbox 設定下, 使用同一個 .vdi, 必須要先修改其 UUID: \n "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage" internalcommands sethduuid c:\\users\\yen\\downloads\\win10.vdi \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '', 'tags': '', 'url': 'task4.html'}, {'title': 'Homework', 'text': "1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '作業一 (20%): 採用  nginx \xa0(在學校電腦桌面) 建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n nginx和virtualbox 皆可以用 \n 要先下載task3裡的東西 \n (Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載) \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'nginx', 'text': '', 'tags': '', 'url': 'nginx.html'}, {'title': 'HW2', 'text': "作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'HW2.html'}, {'title': 'Midterm', 'text': "2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg's world \xa0( 原始碼 ) \n", 'tags': '', 'url': 'Midterm.html'}, {'title': 'Final', 'text': "3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg's world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg's world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n", 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};